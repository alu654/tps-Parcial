import usuarios.*
import localidades.*
import barrileteCosmico.barrilete
import mediosDeTransporte.*
import viajes.*

describe "al aplicar 25% de descuento:" {

	fixture {
		barrilete.aplicarDescuentos(0.25)
	}

	test "lastToninas con 25% de descuento sale 2625" {
		assert.equals(2625, lastToninas.precio())
	}

	test "lastToninas tiene un certificado como parte de su equipaje" {
		assert.that(lastToninas.equipaje().contains("Certificado de descuento"))
	}

}

describe "tests de destinos sin aplicar descuento" {

	test "los destinos mas importantes de BC son garlicsSea y lastToninas" {
		assert.equals(#{ garlicsSea, lastToninas }, barrilete.destinosMasImportantes())
	}

	test "silversSea no es un destino peligroso" {
		assert.that(!silversSea.esPeligroso())
	}

	test "los destinos mas peligrosos hasta el momento son lastToninas" {
		assert.equals(#{ lastToninas }, barrilete.localidades().filter{ localidad => localidad.esPeligroso()})
	}

	test "barrilete cosmico es una empresa extrema" {
		assert.that(barrilete.esUnaEmpresaExtrema())
	}

	test "los destinos de barrilete cosmico son Last Toninas, GarlicÂ´s sea, Good Airs y Silver's Sea." {
		assert.equals(#{ "Garlic's Sea", "Silver's Sea", "Last Toninas", "Good Airs" }, barrilete.cartaDeDestinos().asSet())
	}

	test "PHari tiene 500km" {
		assert.equals(500, pabloHari.kilometrosDeUnUsuario())
	}

	test "la distancia desde Good Airs hasta Silvers sea es de 470" {
		assert.equals(470, goodAirs.distanciaHasta(silversSea))
	}

}

describe "al aplicar 15% de descuento: y si quiere viajar a good Airs" {

	const transporteX = new MedioDeTransporte(tiempoQueTarda = 3, costoPorKilometro = 0.45)
	const viajeX = new Viaje(origen = lastToninas, destino = goodAirs, transporte = transporteX)

	fixture {
		barrilete.aplicarDescuentos(0.15)
		barrilete.transportes().add(transporteX)
		pabloHari.viajarHacia(goodAirs, transporteX)
	}

	test "los precios finales sin transporte son 2125, 1147.5, 2975, 1275 (respectivamente) y todos poseen certificado de desc" {
		assert.equals(2125, garlicsSea.precio())
		assert.equals(1147.5, silversSea.precio())
		assert.equals(2975, lastToninas.precio())
		assert.equals(1275, goodAirs.precio())
		assert.that(barrilete.localidades().all{ localidad => localidad.equipaje().contains("Certificado de descuento")})
	}

	test "si viajara a goodAirs con 15% descuento, le alcanza justo para ir en un transporte de costo 0.45/KM" {
		assert.equals(goodAirs, pabloHari.localidad())
		assert.that(pabloHari.viajes().contains(viajeX))
		assert.equals(0, pabloHari.cuenta())
	}

}

describe "tests si PHari viaja a Silver's sea en un transporte cuyo costo por kilometro es 5" {

	const transporteX = new MedioDeTransporte(tiempoQueTarda = 3, costoPorKilometro = 5)
	const viajeX = new Viaje(origen = lastToninas, destino = silversSea, transporte = transporteX)
	
	fixture {
		barrilete.transportes().add(transporteX)
		pabloHari.viajarHacia(silversSea, transporteX)
	}

	test "pHari puede viajar, silvers Sea pertenece a su historial" {
		assert.that(pabloHari.viajes().contains(viajeX))
	}

	test "phari le alcanza justo para ir a silver's sea (0 pesos en cuenta)" {
		assert.equals(0, pabloHari.cuenta())
	}

	test "a phari no le alcanza para viajar de silversSea a good airs (ciudad destino == ciudad origen)" {
		pabloHari.viajarHacia(goodAirs, transporteX)
		assert.equals(silversSea, pabloHari.localidad())
	}

}

